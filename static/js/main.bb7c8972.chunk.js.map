{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Sweet.js","components/SweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","evt","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Sweet","sweetObj","isOwner","editing","setEditing","text","newSweet","setNewSweet","onDeleteClick","window","confirm","doc","id","delete","fileUrl","refFromURL","toggleEditing","update","src","faTrash","faPencilAlt","SweetFactory","userObj","sweet","setSweet","file","setFile","fileRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","alert","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","alt","backgroundImage","document","querySelector","faTimes","Home","sweets","setSweets","useEffect","orderBy","onSnapshot","snapshot","sweetArray","docs","map","marginTop","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","defaultValue","signOut","push","Navigation","to","marginLeft","display","flexDirection","alignItems","fontSize","photoUrl","AppRouter","isLoggedIn","exact","path","from","App","init","setInit","setUserObj","onAuthStateChanged","user","photoURL","args","Boolean","currentUser","getFullYear","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bb7c8972.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n  };\r\n\r\n firebase.initializeApp(firebaseConfig);\r\n\r\n export const firebaseInstance = firebase;\r\n\r\n export const authService = firebase.auth();\r\n\r\n export const dbService = firebase.firestore();\r\n\r\n export const storageService = firebase.storage();","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChange = (evt) => {\r\n        const { target: { name, value } } = evt;\r\n        if (name === \"email\") {\r\n            setEmail(value);\r\n        } else if (name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    }\r\n    const onSubmit = async (evt) => {\r\n        evt.preventDefault();\r\n        try {\r\n            let data;\r\n            if (newAccount) {\r\n                // create account\r\n                data = await authService.createUserWithEmailAndPassword(\r\n                    email, password\r\n                );\r\n            } else {\r\n                // log in\r\n                data = await authService.signInWithEmailAndPassword(\r\n                    email, password\r\n                );\r\n            }\r\n            console.log(data);\r\n        } catch (error) {\r\n            setError(error.message);\r\n        }\r\n    }\r\n    const toggleAccount = () => {\r\n        setNewAccount((prev) => !prev);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit} className=\"container\">\r\n                <input type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email\" required\r\n                    value={email}\r\n                    onChange={onChange}\r\n                    className=\"authInput\" />\r\n                <input type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\" required\r\n                    value={password}\r\n                    onChange={onChange}\r\n                    className=\"authInput\" />\r\n                <input type=\"submit\"\r\n                    className=\"authInput authSubmit\"\r\n                    value={newAccount ? \"Create Account\" : \"Sign In\"} />\r\n                {error && <span className=\"authError\">{error}</span>}\r\n            </form>\r\n            <span onClick={toggleAccount} className=\"authSwitch\">{newAccount ? \"Sign In\" : \"Create Account\"}</span>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AuthForm;","import AuthForm from \"components/AuthForm\";\r\nimport { authService, firebaseInstance } from \"fbase\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter, faGoogle, faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Auth = () => {\r\n\r\n    const onSocialClick = async (evt) => {\r\n        const {\r\n            target: { name }\r\n        } = evt;\r\n        let provider;\r\n        if (name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if (name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        await authService.signInWithPopup(provider);\r\n    }\r\n\r\n    return (\r\n        <div className=\"authContainer\">\r\n            <FontAwesomeIcon\r\n                icon={faTwitter}\r\n                color={\"#04AAFF\"}\r\n                size=\"3x\"\r\n                style={{ marginBottom: 30 }}\r\n            />\r\n            <AuthForm />\r\n            <div className=\"authBtns\">\r\n                <button name=\"google\" className=\"authBtn\" onClick={onSocialClick}>\r\n                    Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n                </button>\r\n                <button name=\"github\" className=\"authBtn\" onClick={onSocialClick}>\r\n                    Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Auth;","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Sweet = ({ sweetObj, isOwner }) => {\r\n\r\n    const [editing, setEditing] = useState(false);\r\n    const [newSweet, setNewSweet] = useState(sweetObj.text);\r\n\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this sweet?\");\r\n        if (ok) {\r\n            await dbService.doc(`sweets/${sweetObj.id}`).delete();\r\n            if (sweetObj.fileUrl !== \"\") {\r\n                await storageService.refFromURL(sweetObj.fileUrl).delete();\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n    const onSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        dbService.doc(`sweets/${sweetObj.id}`).update({\r\n            text: newSweet // input에 있는 text\r\n        });\r\n        setEditing(false); // editing 모드 off\r\n    }\r\n    const onChange = (evt) => {\r\n        const {\r\n            target: { value }\r\n        } = evt;\r\n        setNewSweet(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"sweet\">\r\n            {editing ? ( // editing 모드 on이면\r\n                <>\r\n                    <form onSubmit={onSubmit} className=\"container sweetEdit\">\r\n                        <input type=\"text\"\r\n                            placeholder=\"Edit your sweet\"\r\n                            value={newSweet}\r\n                            required\r\n                            onChange={onChange}\r\n                            className=\"formInput\" />\r\n                        <input type=\"submit\"\r\n                            value=\"update sweet\"\r\n                            className=\"formBtn\" />\r\n                    </form>\r\n                    <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n                        cancel\r\n                    </span>\r\n                </>\r\n            ) : (\r\n                    <>\r\n                        <h4>{sweetObj.text}</h4>\r\n                        { sweetObj.fileUrl && <img src={sweetObj.fileUrl} />}\r\n                        { isOwner && (\r\n                            <div className=\"sweet__actions\">\r\n                                <span onClick={onDeleteClick}>\r\n                                    <FontAwesomeIcon icon={faTrash} />\r\n                                </span>\r\n                                <span onClick={toggleEditing}>\r\n                                    <FontAwesomeIcon icon={faPencilAlt} />\r\n                                </span>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sweet;","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SweetFactory = ({ userObj }) => {\r\n\r\n    const [sweet, setSweet] = useState(\"\");\r\n    const [file, setFile] = useState(\"\");\r\n\r\n    const onSubmit = async (evt) => {\r\n        evt.preventDefault();\r\n        let fileUrl = \"\";\r\n        if (sweet !== \"\") {\r\n            if (file !== \"\") {\r\n                const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n                const response = await fileRef.putString(file, \"data_url\");\r\n                fileUrl = await response.ref.getDownloadURL();\r\n            }\r\n            const sweetObj = {\r\n                text: sweet,\r\n                createdAt: Date.now(),\r\n                creatorId: userObj.uid,\r\n                fileUrl\r\n            }\r\n            await dbService.collection(\"sweets\").add(sweetObj);\r\n            setSweet(\"\");\r\n            setFile(\"\");\r\n        } else {\r\n            alert(\"내용을 입력해주세요.\");\r\n        }\r\n    }\r\n    const onChange = (evt) => {\r\n        const {\r\n            target: { value }\r\n        } = evt;\r\n        setSweet(value);\r\n    }\r\n    const onFileChange = (evt) => {\r\n        const {\r\n            target: { files }\r\n        } = evt;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            // 파일 로딩이 끝날 때 finishedEvent를 갖게 됨\r\n            const {\r\n                currentTarget: { result }\r\n            } = finishedEvent;\r\n            setFile(result);\r\n        }\r\n        reader.readAsDataURL(theFile); // 그 다음에 readAsDataURL 사용해 데이터를 얻게 됨\r\n    }\r\n    const onClearPhotoClick = () => {\r\n        setFile(\"\");\r\n        document.querySelector(\"input[type='file']\").value = \"\";\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n            <div className=\"factoryInput__container\">\r\n                <input type=\"text\"\r\n                    value={sweet}\r\n                    onChange={onChange}\r\n                    placeholder=\"What's on your mind?\"\r\n                    maxLength={120}\r\n                    className=\"factoryInput__input\" />\r\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n            </div>\r\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\r\n                <span>Add photos</span>\r\n                <FontAwesomeIcon icon={faPlus} />\r\n            </label>\r\n            <input type=\"file\"\r\n                id=\"attach-file\"\r\n                accept=\"image/*\"\r\n                onChange={onFileChange}\r\n                style={{\r\n                    opacity: 0,\r\n                }} />\r\n            {file &&\r\n                <div className=\"factoryForm__attachment\">\r\n                    <img src={file}\r\n                        alt=\"thumbnail\"\r\n                        style={{\r\n                            backgroundImage: file,\r\n                        }} />\r\n                    <div className=\"factoryForm__clear\" onClick={onClearPhotoClick}>\r\n                        <span>Remove</span>\r\n                        <FontAwesomeIcon icon={faTimes} />\r\n                    </div>\r\n                </div>\r\n            }\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SweetFactory;","import Sweet from \"components/Sweet\";\r\nimport SweetFactory from \"components/SweetFactory\";\r\nimport { dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\nconst Home = ({ userObj }) => {\r\n\r\n    const [sweets, setSweets] = useState([]);\r\n    useEffect(() => {\r\n        dbService.collection(\"sweets\")\r\n        .orderBy(\"createdAt\", \"desc\")\r\n        .onSnapshot((snapshot) => {\r\n            const sweetArray = snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                ...doc.data(),\r\n            }));\r\n            setSweets(sweetArray);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <SweetFactory userObj={userObj}/>\r\n            <div style={{ marginTop: 30 }}>\r\n                {sweets.map(sweet =>\r\n                    <Sweet key={sweet.id}\r\n                        sweetObj={sweet}\r\n                        isOwner={sweet.creatorId === userObj.uid} />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Profile = ({ userObj, refreshUser }) => {\r\n\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    }\r\n    // const getMySweet = async () => {\r\n    //     const sweets = await dbService.collection(\"sweets\")\r\n    //         .where(\"creatorId\", \"==\", userObj.uid)\r\n    //         .orderBy(\"createdAt\")\r\n    //         .get();\r\n    //     // console.log(sweets.docs.map(doc => doc.data()));\r\n    // }\r\n    const onChange = (evt) => {\r\n        const {\r\n            target: { value }\r\n        } = evt;\r\n        setNewDisplayName(value);\r\n    }\r\n    const onSubmit = async (evt) => {\r\n        evt.preventDefault();\r\n        if(userObj.displayName !== newDisplayName) {\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName\r\n            });\r\n            refreshUser();\r\n        }\r\n    }\r\n    // useEffect(() => {\r\n    //     getMySweet();\r\n    // }, []);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n                <input type=\"text\"\r\n                onChange={onChange}\r\n                placeholder=\"Display Name\" \r\n                defaultValue={newDisplayName}\r\n                className=\"formInput\" />\r\n                <input type=\"submit\" \r\n                value=\"Update Profile\"\r\n                className=\"formBtn\"\r\n                style={{ marginTop: 10 }} />\r\n            </form>\r\n            <span onClick={onLogOutClick}\r\n            className=\"formBtn cancelBtn logOut\">Log Out</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => {\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"nav\">\r\n                <li className=\"navHome\">\r\n                    <Link to=\"/\">\r\n                        <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n                    </Link>\r\n                </li>\r\n                <li className=\"navProfile\">\r\n                    <Link to=\"/profile\"\r\n                        style={{\r\n                            marginLeft: 10,\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            alignItems: \"center\",\r\n                            fontSize: 12,\r\n                        }}>\r\n                        <img src={userObj.photoUrl} className=\"profileImg\" alt=\"profileImage\" />\r\n                        <span className=\"profileName\">\r\n                            {userObj.displayName\r\n                                ? `${userObj.displayName}의 Profile`\r\n                                : \"Profile\"}\r\n                        </span>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Profile from \"../routes/Profile\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\r\n    \r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj}/>}\r\n            <Switch>\r\n                {isLoggedIn ? (\r\n                    <>\r\n                        <Route exact path=\"/\">\r\n                            <Home userObj={userObj} />\r\n                        </Route>\r\n                        <Route exact path=\"/profile\">\r\n                            <Profile userObj={userObj} refreshUser={refreshUser}/>\r\n                        </Route>\r\n                        <Redirect from=\"*\" to=\"/\" />\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Route exact path=\"/\">\r\n                            <Auth />\r\n                        </Route>\r\n                        <Redirect from=\"*\" to=\"/\" />\r\n                    </>\r\n                    )}\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default AppRouter;","import React, { useEffect, useState } from 'react';\nimport AppRouter from './Router';\nimport { authService } from \"fbase\";\n\nconst App = () => {\n\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          photoUrl: user.photoURL,\n          updateProfile: (args) => user.updateProfile(args)\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args)\n    });\n  }\n\n  return (\n    <>\n      {init ?\n        <AppRouter\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n          refreshUser={refreshUser} />\n        : \"initializing...\"}\n      <footer>&copy; {new Date().getFullYear()} Slothwitter </footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}